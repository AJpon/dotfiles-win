[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f

[core]
	symlinks = true
	autocrlf = input

[alias]
	branches = branch -a --sort=-authordate
	tags = tag
	stashes = stash list
	remotes = remote -v
	unstage = reset -q HEAD --
	discard = checkout --
	safe-checkout = "!git stash push -m \"co backup\"; git stash apply; git checkout \"$@\""
	uncommit = reset --mixed HEAD~
	untracked = ls-files . --exclude-standard --others
	ignored = ls-files . --ignored --exclude-standard --others
	amend = commit --amend
	nevermind = !git reset --hard HEAD && git clean -d -f
	graph = log --graph -10 --branches --remotes --tags	--format=format:'%Cgreen%h %Cresetâ€¢ %<(75,trunc)%s (%cN, %cr) %Cred%d' --date-order
	precommit = diff --cached --diff-algorithm=minimal -w
	unmerged = diff --name-only --diff-filter=U
	branch-activity = for-each-ref --format='%(authordate) %(refname)' --sort=-committerdate refs/heads refs/remotes
	current-branch = rev-parse --abbrev-ref HEAD
	branch = branch --sort=-authordate
	switch-dotfiles = !git switch -c $(git branch --show-current | cut -d "." -f 1)"."$(($(git branch --show-current | cut -d "." -f 2) + 1))
	fix = commit --amend
	refresh = fetch --prune
	add-tracked-files = add -u
	wip = !git add --all && git commit -m 'wip'
	recommit = !files=$(git diff --name-only --cached) && git reset --soft HEAD~1 && git add -u ${files} && git commit -m \"$(git log --format=%B --reverse HEAD..HEAD@{1})\"
	merged = "!f () { git branch --merged | grep -v "$(basename "$(git symbolic-ref --short refs/remotes/origin/HEAD)")" | grep -v '*' | sed 's/^..//'; };f"
	tree = log --graph --all --format=format:\"%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)? %an%C(reset)%C(bold yellow)%d%C(reset)\" --abbrev-commit --date=relative
	wdiff = diff --word-diff=color --unified=1
	find = !git ls-files | grep -i
	aliases = !git config --get-regexp '^alias\\.' | sed 's/alias\\.\\([^ ]*\\) \\(.*\\)/\\1\\\\t => \\2/'
	me = !git config --get-regexp user
	root-dir = rev-parse --show-toplevel
	shorty = status --short --branch

	archive-all = "!f() { \
		git archive --format=tar --prefix=project/ HEAD > project.tar; \
		if [ -f .gitmodules ]; then \
			git submodule foreach --recursive 'git archive --format=tar --prefix=$path/ HEAD > ../$path.tar && tar --concatenate --file=../project.tar ../$path.tar && rm ../$path.tar'; \
		fi; \
	}; f"
